Query:languages and compilers for parallel processors especially highly horizontal microcoded machines code compaction

Document:CACM-2138

is designed so as to be ESPECIALLY suitable 
specific machine (the pdp-10): COMPILERS, operating 
ability to produce HIGHLY efficient object CODE, 
programming LANGUAGES, implementation language, 
*********************************************************************
Document:CACM-3110

assembling CODE FOR MACHINES with span-dependent instructions 
of minimizing the lengths of programs FOR such MACHINES. 
CODE generation, assemblers, COMPILERS, 
*********************************************************************
Document:CACM-1852

bootstrapping, of PROCESSORS FOR programming LANGUAGES is 
on contemporary computing MACHINES. experience with 
programming LANGUAGES whose implementation is based 
programming LANGUAGES, implementation techniques 
*********************************************************************
Document:CACM-3156

computing connected components on PARALLEL computers 
o(log2n) time bound also can be achieved using only n$n/$log2n)) PROCESSORS. 
of a symmetric boolean matrix. we assume that the PROCESSORS have 
graph theory, PARALLEL processing, algorithms, 
*********************************************************************
Document:CACM-3075

fast PARALLEL sorting algorithms 
a PARALLEL bucket-sort algorithm is presented 
PROCESSORS. the algorithm makes use of a technique that 
requires more space than the product of PROCESSORS 
*********************************************************************
Document:CACM-2714

merging with PARALLEL PROCESSORS 
|b|=n, m<=n, AND p, p<=m, PARALLEL PROCESSORS 
FOR merging a AND b with the p PARALLEL PROCESSORS, 
PARALLEL processing, PARALLEL merging, PARALLEL binary insertion 
*********************************************************************
Document:CACM-2897

have allowed a new design FOR COMPILERS to emerge. 
such a compiler translates the parsed source CODE into 
lower level CODE by a sequence of steps. each 
lower level CODE AND then performs optimizations 
*********************************************************************
Document:CACM-2896

an exercise in proving PARALLEL programs correct 
a PARALLEL program, dijkstra's on-the-fly garbage 
in this program makes it ESPECIALLY difficult 
with proving such PARALLEL programs correct 
*********************************************************************
Document:CACM-1795

CODE optimization, sequencing of operations, 
optimal CODE FOR serial AND PARALLEL computation 
cacm december, 1969 
*********************************************************************
Document:CACM-2685

the PARALLEL execution of do loops 
methods are developed FOR the PARALLEL execution 
design of COMPILERS FOR such computers is discussed. 
PARALLEL computing, multiprocessor computers, 
*********************************************************************
Document:CACM-2112

context-free LANGUAGES. a formal procedure is given FOR deriving from 
automata, turing MACHINES, regular expression, transduction 
expression, context-free LANGUAGES, translation, recognizers, 
directed COMPILERS, finite state automata 
*********************************************************************
Document:CACM-2495

arithmetic expressions, CODE generation, COMPILERS, 
adapting optimal CODE generation FOR arithmetic 
expressions to the instruction sets available 
on present-day computers 
*********************************************************************
Document:CACM-2175

in serials, in PARALLEL, or in a combination of these 
PARALLEL processing, cache, arithmetic expressions, 
COMPILERS 
PARALLEL exceeds the number of available PROCESSORS, 
*********************************************************************
Document:CACM-2266

a HIGHLY PARALLEL algorithm FOR approximating 
is conceptually suitable FOR PARALLEL computation, 
PARALLEL numerical algorithms, real polynomials, 
all zeros of a polynomial with only real zeros 
*********************************************************************
Document:CACM-1811

the PROCESSORS can simultaneously execute separate 
PROCESSORS have independent instruction counters, meaning 
relatively independently of the other PROCESSORS. communication 
between cooperating PROCESSORS is by 
*********************************************************************
Document:CACM-0950

computations of HIGHLY PARALLEL computers as can be 
PARALLEL methods FOR integrating ordinary differential equations 
"PARALLEL" form. by this is meant that serial 
*********************************************************************
Document:CACM-1923

level LANGUAGES using basic input/output support 
facilities such as command language PROCESSORS. 
high level LANGUAGES, command language 
pseudofiles 
*********************************************************************
Document:CACM-2921

which are nondeterministic finite state MACHINES (fsms), 
AND, as a special case, regular expressions, 
describe the syntax of programming LANGUAGES more 
finite state MACHINES (automata), regular expressions, 
*********************************************************************
Document:CACM-1223

high speed compilation of efficient object CODE 
the object CODE which would be most efficient 
is HIGHLY machine dependent. the discussion is in terms 
is applicable to most algebraic LANGUAGES. 
*********************************************************************
Document:CACM-1665

PROCESSORS using finite state techniques 
lexical PROCESSORS is dealt with in this tutorial article 
item is identified by a CODE number together with 
AND character count in the item. the PROCESSORS 
*********************************************************************
Document:CACM-2706

to the COMPACTION of character sets 
COMPACTION of character sets, set basis, set covering, 
a note on the set basis problem related 
*********************************************************************
Document:CACM-3066

testing, CODE walkthroughs, CODE inspections, 
AND CODE walkthroughs/inspections 
testing, employing 59 HIGHLY experienced data 
popular CODE walk through/inspection method was as effective 
*********************************************************************
Document:CACM-1988

of PROCESSORS FOR programming languages-compilers, 
such as compiler-compilers or extendible LANGUAGES. 
be produced from a given set of component PROCESSORS. 
a formalism FOR translator interactions 
*********************************************************************
Document:CACM-0799

MACHINES require only two working tapes plus a compiler 
to the construction of algol COMPILERS. 
design of a separable transition-diagram compiler* 
*********************************************************************
Document:CACM-2723

the simple case of two PROCESSORS, one performing lisp-like 
complex cases involving several list PROCESSORS 
AND one or more garbage collection PROCESSORS are also briefly discussed. 
semaphores, PARALLEL processing, compactification, relocation, 
*********************************************************************
Document:CACM-1463

more on extensible MACHINES 
MACHINES (em) is the facility FOR providing 
various levels of programming LANGUAGES. 
*********************************************************************
Document:CACM-2497

synchronizing PROCESSORS with memory-content-generated interrupts 
of synchronizing PROCESSORS in a multiprocessor 
in the repertoire of the PROCESSORS AND a special "read-interlock" 
interrupts,supervisors, monitors, debugging, PARALLEL 
*********************************************************************
Document:CACM-2785

PARALLEL computation, PARALLEL architecture 
glypnir is one of the earliest existing LANGUAGES 
of the problems associated with PARALLEL computer 
glypnir-a programming language FOR illiac iv 
*********************************************************************
Document:CACM-1163

HIGHLY successful encouraging application of the 
techniques to other source AND object LANGUAGES. 
philco/ibm translation at problem-oriented, symbolic AND binary levels 
*********************************************************************
Document:CACM-2411

in COMPILERS, program documentation, program flow graphs, 
semantics of programming LANGUAGES, structured programming. 
tree-structured programs 
*********************************************************************
Document:CACM-0303

mechanical LANGUAGES AND their PROCESSORS 
some basic terminology connected with 
the suggestions in this paper are part of the 
*********************************************************************
Document:CACM-2570

a comparison of list schedules FOR PARALLEL processing systems 
the problem of scheduling two or more PROCESSORS 
PARALLEL processing, precedence graphs, scheduling, 
*********************************************************************
Document:CACM-2423

a parser-generating system FOR constructing compressed COMPILERS 
syntactic rule corresponds to a (possibly empty) "CODE 
program. typical one-pass COMPILERS constructed by the 
table entries AND 82 words are links to CODE 
*********************************************************************
Document:CACM-3148

of particular LANGUAGES AND MACHINES. it appears to be useful FOR 
LANGUAGES. based on primitive notions of module, message, 
program of development in advanced programming LANGUAGES, AND relations 
high level programming FOR distributed computing 
*********************************************************************
Document:CACM-1947

object CODE optimization 
COMPILERS, data flow analysis, dominance, efficiency, 
instructions, object CODE, optimization, redundancy 
*********************************************************************
Document:CACM-0670

the industry is HIGHLY regulated by government 
AND, hence, is subject to many statutes AND regulations. 
of computerization in the banking business are ESPECIALLY 
relating to off-premises PROCESSORS, particularly 
*********************************************************************
Document:CACM-0205

macro instruction extensions of compiler LANGUAGES 
macroinstruction COMPILERS constructed from 
a small set of functions can be made extremely 
*********************************************************************
Document:CACM-1389

PROCESSORS as ipl, lisp, comit ad snobol, but permits 
the user to get much closer to machine CODE in 
a programmer's description of l^6 
*********************************************************************
Document:CACM-1425

flow diagrams, turing MACHINES AND 
LANGUAGES with only two formation rules 
to the theory of turing MACHINES. with every turing 
the two MACHINES l AND r. that family is a proper 
*********************************************************************
Document:CACM-0082

handling identifiers as internal symbols in language PROCESSORS 
programmer-oriented symbols in language PROCESSORS 
substitution of computer-oriented symbols FOR 
*********************************************************************
Document:CACM-1159

programs, AND ESPECIALLY COMPILERS, from 
machine independence: its technology AND economics 
a survey is offered of techniques FOR transferring 
*********************************************************************
Document:CACM-3175

every CODE letter is assigned probabilities of representing plain text 
letters. these probabilities are updated in PARALLEL FOR all 
CODE letters, using joint letter probabilities. iterating the updating 
breaking substitution ciphers using a relaxation algorithm 
*********************************************************************
Document:CACM-2929

with little increase in the size of compiled CODE AND a 
program optimization, COMPILERS, structured 
programming LANGUAGES, run-time statistics 
an analysis of inline substitution FOR a structured programming language 
*********************************************************************
Document:CACM-2904

COMPILERS, optimization of compiled CODE, program analysis, 
an algorithm FOR reduction of operator strength 
a simple algorithm which uses an indexed temporary 
*********************************************************************
Document:CACM-1603

a multiprogramming monitor FOR small MACHINES 
PARALLEL processing capability. user programs communicate 
int, a combination hardware/software monitor 
*********************************************************************
Document:CACM-3127

over a large set of MACHINES. it is currently running on two minicomputers 
application programs which use thoth are HIGHLY portable. thoth 
thoth, a portable real-time operating system 
*********************************************************************
Document:CACM-2064

standard features of most COMPILERS today. the elements of such structures are 
by a codeword which can be interpreted by the system. CODE words may describe 
storage control, subscripting, COMPILERS 
operations on generalized arrays with the genie compiler 
*********************************************************************
Document:CACM-3080

COMPILERS, correctness, CODE optimization, 
proving the correctness of heuristically optimized CODE 
the system is as a post optimization step in CODE 
*********************************************************************
Document:CACM-2717

utility program, programming LANGUAGES, nonprocedural LANGUAGES 
which provides very powerful AND HIGHLY flexible data 
convert: a high level translation 
definition language FOR data conversion 
*********************************************************************
Document:CACM-2644

a language ESPECIALLY oriented toward automated 
paramodulation, programming LANGUAGES 
a theorem-proving language FOR experimentation 
*********************************************************************
Document:CACM-0637

COMPILERS with COMPILERS"; indeed, it pointed out many advantages 
neliac systems FOR several different MACHINES 
a neliac-generated 7090-1401 compiler 
*********************************************************************
Document:CACM-3005

efficiently. a HIGHLY compact instruction 
size by a factor of 3. unlike a huffman CODE, 
only fixed length (1-byte) op CODE AND address 
implications of structured programming FOR machine architecture 
*********************************************************************
Document:CACM-2567

in nature but to be ESPECIALLY efficient when dealing 
HIGHLY stiff systems. 
an exponential method FOR the solution of 
systems of ordinary differential equations 
*********************************************************************
Document:CACM-2645

two LANGUAGES FOR estimating program efficiency 
two LANGUAGES enabling their users to estimate 
of the two LANGUAGES are included. the limitations of 
programming LANGUAGES, syntax-directed translation, 
*********************************************************************
Document:CACM-1154

unrestricted turing MACHINES. intermediate MACHINES 
a survey of MACHINES which are more powerful 
turing MACHINES is presented. it is felt that the MACHINES 
multi-tape AND infinite-state automata -- a survey 
*********************************************************************
Document:CACM-3171

to be used FOR implementations of high level LANGUAGES. under suitable 
line number administration, diagnostic messages, abstract machine CODE 
line numbers made cheap 
*********************************************************************
Document:CACM-2886

use FOR the definition of programming LANGUAGES 
AND COMPILERS; a formal definition of attribute grammars 
attribute grammars, semantics of programming LANGUAGES, 
multipass COMPILERS, semantic evaluation, semantic conditions 
*********************************************************************
Document:CACM-0243

in this paper with parity evaluations along the HORIZONTAL, 
a four-dimensional CODE, correcting three AND detecting 
n-dimensional codes FOR detecting AND correcting multiple errors 
*********************************************************************
Document:CACM-2433

which could be expected to influence language (AND 
CODE structuring is the crucial illiac optimization 
this storage method AND express PARALLEL algorithms are described. 
parallelism, array allocation, PARALLEL control 
*********************************************************************
Document:CACM-3150

beyond programming LANGUAGES 
as high level LANGUAGES enabled the programmer to escape from the 
intricacies of a machine's order CODE, higher level programming systems 
shortcomings of programming LANGUAGES as they now exist, 
*********************************************************************
Document:CACM-2491

threaded CODE 
the concept of "threaded CODE" is presented as 
an alternative to machine language CODE. hardware 
it is realized as interpretive CODE not needing 
*********************************************************************
Document:CACM-1548

tables with regard to HORIZONTAL AND vertical 
parsing of decision tables 
reduction in the size of decision tables can be 
*********************************************************************
Document:CACM-3074

a time- AND space- efficient garbage COMPACTION algorithm 
garbage collection, COMPACTION, compact ification, 
given an area of storage containing scattered, 
*********************************************************************
Document:CACM-2748

indirect threaded CODE 
an efficient arrangement FOR interpretive CODE 
of threaded CODE but requires less space AND is more 
threaded CODE, snobol4, interpretors, CODE generation 
*********************************************************************
Document:CACM-2034

has been successful on over 15 MACHINES of widely varying 
programming LANGUAGES, implementation techniques 
the mobile programming system: stage2 
*********************************************************************
Document:CACM-1825

a practical method FOR constructing lr(k) PROCESSORS 
is developed. these PROCESSORS are capable 
PROCESSORS are satisfied, then an lr(k) processor 
*********************************************************************
Document:CACM-1807

COMPILERS that have proved to produce excellent object 
CODE without significantly reducing the compilation 
fortran, optimization, expressions, COMPILERS, 
optimization of expressions in fortran 
*********************************************************************
Document:CACM-1262

procedure-oriented language statements to facilitate PARALLEL processing 
in PARALLEL. the statements are do together 
a range of PARALLEL operation AND partly to 
define each PARALLEL path within this range. do togethers 
*********************************************************************
Document:CACM-2973

PARALLEL computer, PARALLEL sorting, PARALLEL merge, 
sorting on a mesh-connected PARALLEL computer 
two algorithms are presented FOR sorting n^2 
*********************************************************************
Document:CACM-2252

LANGUAGES with nested statement structure 
which applies ESPECIALLY to programming LANGUAGES 
a method FOR incrementally compiling 
*********************************************************************
Document:CACM-1362

CODE extension in ascii* (an asa tutorial) 
the american standard CODE FOR information 
characters associated with the principle of CODE extension, 
in the CODE. the manner of use of these 
*********************************************************************
Document:CACM-0048

shift-register CODE FOR indexing applications 
CODE with n = 10 is described FOR calling 
a single-error correcting CODE ("minimum-distance-three" 
as the station identification CODE. embedding this in 
*********************************************************************
Document:CACM-2740

semaphores). the number of PARALLEL processes is carefully 
structuring, buffering, PARALLEL processes, synchronizing 
primitives, reentrant CODE, rc 4000, project 
a large semaphore based operating system 
*********************************************************************
Document:CACM-1655

standard CODE, CODE, information interchange, characters, 
CODE extension, CODE table, bit pattern 
CODE extension procedures FOR information 
interchange* (proposed usa standard) 
*********************************************************************
Document:CACM-1158

program structures FOR PARALLEL processing 
constructs FOR organizing AND explicating PARALLEL 
program segments are discussed as extensions 
*********************************************************************
Document:CACM-0763

a syntax controlled generator of formal language PROCESSORS 
cacm august, 1963 
eickel, j. 
*********************************************************************
Document:CACM-2633

contour plotting, data transmission, remote terminal, data COMPACTION 
compact representation of contour plots FOR phone line transmission 
methods FOR the compact representation of contour 
*********************************************************************
Document:CACM-2939

control, AND ESPECIALLY data abstractions-are useful 
LANGUAGES, through the procedure or subroutine. 
programming LANGUAGES, data types, data abstractions, 
abstraction mechanisms in clu 
*********************************************************************
Document:CACM-3093

programming LANGUAGES, error correction, automatic 
correction, parsing, lr, syntax errors, COMPILERS 
automatic error recovery FOR lr parsers 
*********************************************************************
Document:CACM-2579

register allocation, COMPILERS, programming 
LANGUAGES, virtual memory, demand paging 
register allocation via usage counts 
*********************************************************************
Document:CACM-2514

PARALLEL). examples are given involving array LANGUAGES 
an array grammar programming system 
a package of fortran programs has been developed 
*********************************************************************
Document:CACM-1613

one-pass compilation of arithmetic expressions FOR a PARALLEL processor 
FOR such a processor should produce object CODE to take 
under the assumption that a processor may have 
*********************************************************************
Document:CACM-2700

reduction: a method of proving properties of PARALLEL programs 
when proving that a PARALLEL program has a 
halting. thus correctness proofs of a PARALLEL 
PARALLEL program, semaphore, verification 
*********************************************************************
Document:CACM-1310

a rapid braille transliteration technique FOR certain ibm MACHINES 
cacm february, 1965 
weiler, w. j. 
*********************************************************************
Document:CACM-2253

rather than the machine CODE. the goal is to automatically 
generate CODE FOR handling the tedious address 
LANGUAGES, program optimization, range operations, symbolic 
index ranges FOR matrix calculi 
*********************************************************************
Document:CACM-1324

PROCESSORS are seen to be concerned with measuring, 
LANGUAGES AND searching large tree structures. 
answering english questions by computer: a survey 
*********************************************************************
Document:CACM-1756

usa standard, card CODE, punched card, punched card 
CODE, hole-patterns, hole-patterns assignment, 
hollerith punched card code* (proposed usa standard) 
*********************************************************************
Document:CACM-2085

paging MACHINES, demand paging, replacement algorithm 
comment on a paging anomaly 
cacm march, 1970 
*********************************************************************
Document:CACM-2022

paging MACHINES, demand paging, replacement algorithm 
note on an anomaly in paging 
cacm july, 1970 
*********************************************************************
Document:CACM-2684

of the syntax of programming LANGUAGES has been 
to define abstract syntax AND translations between LANGUAGES, 
COMPILERS, formal definition, pl/i standards 
production systems: or can we do better than bnf? 
*********************************************************************
Document:CACM-0100

recursive subscripting COMPILERS AND list-types memories 
cacm february, 1959 
carr iii, j. w. 
*********************************************************************
Document:CACM-1826

of the algorithm is more the COMPACTION of active 
a lisp garbage-collector FOR virtual-memory computer systems 
in this paper a garbage-collection algorithm 
*********************************************************************
Document:CACM-1652

a CODE FOR non-numeric information processing 
a CODE has been specifically designed to simplify 
the system user. the CODE has direct application 
text editing. this CODE, called ipc (information processing 
*********************************************************************
Document:CACM-1302

PARALLEL signaling speeds FOR data transmission 
(proposed american stand ard) 
cacm march, 1965 
*********************************************************************
Document:CACM-1828

PARALLEL accessing, PARALLEL search, file search, 
which will maximize the amount of PARALLEL 
synchronization in a parallel-accessed data base 
*********************************************************************
Document:CACM-1738

be simple, flexible, AND HIGHLY efficient to use. 
debugging, utility program, programming LANGUAGES 
writing an outline debugging program FOR the experienced user 
*********************************************************************
Document:CACM-0141

some thoughts on PARALLEL processing 
cacm october, 1960 
yarbrough, l. d. 
*********************************************************************
Document:CACM-1992

comment on bell's quadratic quotient method FOR hash CODE searching 
hashing, hash CODE, scatter storage, calculated address, 
cacm september, 1970 
*********************************************************************
Document:CACM-2316

programming LANGUAGES: history AND future 
showing the chronological development of LANGUAGES AND their 
of 1972. key concepts other than specific LANGUAGES are discussed. 
programming LANGUAGES, higher level LANGUAGES, 
*********************************************************************
Document:CACM-2289

achieved by virtue of the possibilities FOR PARALLEL 
ESPECIALLY FOR problems whose solutions appear to be inherently 
PARALLEL processing, special purpose computers, 
cellular arrays FOR the solution of graph problems 
*********************************************************************
